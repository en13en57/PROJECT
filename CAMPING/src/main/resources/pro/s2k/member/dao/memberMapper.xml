<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace= "pro.s2k.camp.dao.MemberDAO">

	<!-- 1. 저장하기 -->
	<insert id="insert" parameterType="MemberVO">
		insert into camp_member
		(mb_ID,mb_password,mb_name,mb_nick,mb_email,mb_tel,mb_birth,mb_zipcode,mb_address1,mb_address2,authkey,socialID,socialNumber)
		<!-- insert into camp_member로 그냥 해놓으면 전체적인 값을 집어넣어줘야함 위에 같이 이렇게 명시해서 넣으면 
			필요한 값만 넣음. -->
		values
		(
		<!-- #{mb_idx}, -->
		#{mb_ID},
		#{mb_password},
		#{mb_name},
		#{mb_nick},
		#{mb_email},
		#{mb_tel},
		#{mb_birth},
		#{mb_zipcode},
		#{mb_address1},
		#{mb_address2},
		#{authkey},  <!-- 임시 authKey 나중에 바꿔야함. -->
		#{socialID},
		#{socialNumber}

		)
	</insert>

	<!-- 2. 1개 얻기 -->
	<select id="selectByIdx" parameterType="int"
		resultType="MemberVO">
		select * from camp_member where mb_idx=#{mb_idx}
	</select>
	<!-- 3. 수정하기 -->
	<update id="update" parameterType="MemberVO">
		update member set
		mb_nick =
		#{mb_nick},
		mb_tel = #{mb_tel},
		mb_zipcode = #{mb_zipcode},
		address1 =
		#{mb_address1},
		address2 = #{mb_address2},
		where
		mb_idx=#{mb_idx}
	</update>
	<!-- 4. 삭제하기 -->
	<delete id="delete" parameterType="int">
		delete from camp_member where
		mb_idx=#{mb_idx}
	</delete>
	<!-- 4-1 유저 탈퇴 -->
	<!-- 유저가 회원 탈퇴를 할 경우 DB에 회원정보는 일단 남아있어야한다. -->
	<update id ="userDelete" parameterType="MemberVO">
		update camp_member set
		del = 1
		where
		mb_idx = #{mb_idx}

	</update>
	<!-- 5. 모두보기(관리자만 사용) -->
	<select id="selectList" resultType="MemberVO">
		select * from camp_member
		order by mb_idx desc
	</select>
	
	
	
	<!-- 6. 개수세기 -->
	<select id="selectCount" resultType="int">
		select count(*) from
		camp_member
	</select>
	<!-- 7. 해당아이디의 개수세기(아이디 중복확인 : 0이면 없는아이디, 1이상이면 존재하는 아이디) -->
	<select id="selectCountByUserId" resultType="int"
		parameterType="string">
		select count(*) from camp_member where mb_ID=#{mb_ID}
	</select>
	<!-- 8. 해당닉네임의 개수세기(아이디 중복확인 : 0이면 없는아이디, 1이상이면 존재하는 아이디) -->
	<select id="selectCountByUserNick" resultType="int"
		parameterType="string">
		select count(*) from camp_member where
		mb_nick=#{mb_nick}
	</select>
	<!-- 8. 이름과 전화번호로 가져오기(아이디찾기 사용) -->
		<select id="selectByUsername" parameterType="hashmap" resultType="MemberVO">
		select * from camp_member where mb_name=#{mb_name} and mb_tel=#{mb_tel}
	</select>
	<!-- 9. ID와과 전화번호로 가져오기(비번찾기 사용) -->
	<select id="selectByUserId" parameterType="hashmap" resultType="MemberVO">
		select * from camp_member where mb_ID=#{mb_ID} and mb_email=#{mb_email}
	</select>

	<!-- 10. 인증여부를 변경하는 쿼리 -->
	<update id="updateRole" parameterType="hashmap">
		update camp_member a join
		member_role mr on
		a.mb_ID = mr.mb_ID
		set mr.gr_role ='ROLE_USER'
		where
		mr.mb_ID=#{mb_ID} and a.authkey=#{authkey};
	</update>
	<!-- 11. 비밀번호 변경하기 -->
	<update id="updatePassword" parameterType="hashmap">
		update camp_member set
		mb_password=#{mb_password} where mb_ID=#{mb_ID}
	</update>

	<!-- 12. ID로 가져오기 -->
	<select id="selectUserId" parameterType="string"
		resultType="MemberVO">
		select
		a.mb_idx,
		a.mb_ID,
		a.mb_password,
		a.mb_name,
		a.mb_nick,
		a.mb_email,
		a.mb_tel,
		a.mb_birth,
		a.mb_zipcode,
		a.mb_address1,
		a.mb_address2,
		a.mb_use,
		a.authkey,
		a.del,
		mr.gr_idx,
		mr.gr_role
		from camp_member a
		join member_role mr on a.mb_ID = mr.mb_ID
		where a.mb_ID=#{mb_ID}
	</select>

	<!-- 13. 해당이메일의 개수세기(이메일 중복확인 : 0이면 없는 이메일, 1이상이면 존재하는 이메일 -->
	<select id="selectCountByEmail" resultType="int"
		parameterType="string">
		select count(*) from camp_member where
		mb_email=#{mb_email}
	</select>
<update id="updateNick" parameterType="hashmap">
      update camp_member set 
      mb_Nick = #{mb_nick}
      where mb_ID= #{mb_ID}
   </update>
   
   <!-- 맴버 검색기능 -->
	<select id="selectSearchMember" parameterType="hashmap"
		resultType="MemberVO">
		select
		a.mb_idx,a.mb_ID,a.mb_name,a.mb_nick,a.mb_email,a.mb_tel,a.mb_birth,a.mb_zipcode,a.mb_address1,a.mb_address2,
		(select gr_role from member_role where mb_ID = a.mb_ID) as gr_role
		from camp_member a
		where


		<if test="searchType == 'all'">
			mb_ID like concat('%','#{searchtext}','%')
			or mb_nick like concat ('%','#{searchtext}','%')
			or mb_name like concat ('%','#{searchtext}','%')
			or (select gr_role from member_role where mb_ID = a.mb_ID) like concat('%','#{searchtext}','%')
		</if>

		<if test="searchType == 'ID'">mb_ID like concat('%','#{searchtext}','%') </if>
		<if test="searchType == 'nick'"> mb_nick like concat ('%','#{searchtext}','%') </if>
		<if test="searchType == 'name'">mb_name like concat ('%','#{searchtext}','%')</if>
		<if test="searchType == 'role'">(select gr_role from member_role where mb_ID = a.mb_ID) like concat('%','#{searchtext}','%') </if>
	</select>
   <!-- 소셜 로그인 -->
   <select id="selectSocialID" parameterType="string" resultType="memberVO">
   		select socialID, mb_ID, mb_password from camp_member where socialID = #{socialID}
   </select>
   
   
</mapper>